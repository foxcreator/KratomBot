<?php

namespace App\Filament\Resources\MemberResource\RelationManagers;

use Filament\Infolists\Components\Group;
use Filament\Infolists\Components\ImageEntry;
use Filament\Infolists\Components\TextEntry;
use Filament\Resources\RelationManagers\RelationManager;
use Filament\Tables;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Table;

class OrdersRelationManager extends RelationManager
{
    protected static string $relationship = 'orders';

    protected static ?string $title = '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è';
    protected static ?string $recordTitleAttribute = 'id';

    public function table(Tables\Table $table): Tables\Table
    {
        return $table
            ->heading('üõí –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞')
            ->description('–ü–µ—Ä–µ–≥–ª—è–¥ –≤—Å—ñ—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –æ–±—Ä–∞–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞')
            ->columns([
                TextColumn::make('order_number')
                    ->label('‚Ññ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è')
                    ->searchable()
                    ->sortable()
                    ->weight('bold')
                    ->color('primary'),
                    
                TextColumn::make('statusName')
                    ->label('–°—Ç–∞—Ç—É—Å')
                    ->badge()
                    ->color(fn (string $state): string => match ($state) {
                        '–ù–æ–≤–µ' => 'warning',
                        '–û—á—ñ–∫—É—î –æ–ø–ª–∞—Ç–∏' => 'danger',
                        '–ß–∞—Å—Ç–∫–æ–≤–æ –æ–ø–ª–∞—á–µ–Ω–æ' => 'warning',
                        '–û–ø–ª–∞—á–µ–Ω–æ' => 'success',
                        '–û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è' => 'info',
                        '–í–∏–∫–æ–Ω–∞–Ω–æ' => 'success',
                        '–°–∫–∞—Å–æ–≤–∞–Ω–æ' => 'danger',
                    })
                    ->sortable(),
                    
                TextColumn::make('total_amount')
                    ->label('–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞')
                    ->money('UAH')
                    ->sortable()
                    ->weight('bold')
                    ->color('info'),
                    
                TextColumn::make('paid_amount')
                    ->label('–°–ø–ª–∞—á–µ–Ω–æ')
                    ->money('UAH')
                    ->color('success')
                    ->sortable(),
                    
                TextColumn::make('remaining_amount')
                    ->label('–ó–∞–ª–∏—à–æ–∫')
                    ->money('UAH')
                    ->color(fn ($record) => $record->remaining_amount > 0 ? 'danger' : 'success')
                    ->sortable(),
                    
                TextColumn::make('paymentStatusName')
                    ->label('–û–ø–ª–∞—Ç–∞')
                    ->badge()
                    ->color(fn (string $state): string => match ($state) {
                        '–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ' => 'danger',
                        '–ß–∞—Å—Ç–∫–æ–≤–æ –æ–ø–ª–∞—á–µ–Ω–æ' => 'warning',
                        '–û–ø–ª–∞—á–µ–Ω–æ' => 'success',
                        '–ü–µ—Ä–µ–ø–ª–∞—á–µ–Ω–æ' => 'info',
                    }),
                    
                TextColumn::make('orderItems')
                    ->label('–¢–æ–≤–∞—Ä–∏')
                    ->formatStateUsing(function ($record) {
                        $count = $record->orderItems->count();
                        $totalQty = $record->orderItems->sum('quantity');
                        return "{$count} –ø–æ–∑–∏—Ü—ñ–π ({$totalQty} —à—Ç.)";
                    })
                    ->color('gray'),
                    
                TextColumn::make('created_at')
                    ->label('–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è')
                    ->dateTime('d.m.Y H:i')
                    ->sortable()
                    ->color('gray'),
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('payment_status')
                    ->label('üí≥ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏')
                    ->options([
                        'unpaid' => 'üî¥ –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ',
                        'partial_paid' => 'üü° –ß–∞—Å—Ç–∫–æ–≤–æ –æ–ø–ª–∞—á–µ–Ω–æ',
                        'paid' => 'üü¢ –û–ø–ª–∞—á–µ–Ω–æ',
                        'overpaid' => 'üîµ –ü–µ—Ä–µ–ø–ª–∞—á–µ–Ω–æ',
                    ]),
                Tables\Filters\SelectFilter::make('status')
                    ->label('üìã –°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
                    ->options([
                        'new' => 'üÜï –ù–æ–≤–µ',
                        'pending_payment' => '‚è≥ –û—á—ñ–∫—É—î –æ–ø–ª–∞—Ç–∏',
                        'partially_paid' => 'üü° –ß–∞—Å—Ç–∫–æ–≤–æ –æ–ø–ª–∞—á–µ–Ω–æ',
                        'paid' => '‚úÖ –û–ø–ª–∞—á–µ–Ω–æ',
                        'processing' => '‚öôÔ∏è –û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è',
                        'completed' => 'üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ',
                        'cancelled' => '‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ',
                    ]),
                Tables\Filters\Filter::make('has_items')
                    ->label('üõí –ó —Ç–æ–≤–∞—Ä–∞–º–∏')
                    ->query(fn ($query) => $query->whereHas('orderItems'))
                    ->toggle(),
                Tables\Filters\Filter::make('high_value')
                    ->label('üí∞ –í–∏—Å–æ–∫—ñ —Å—É–º–∏ (>10,000 –≥—Ä–Ω)')
                    ->query(fn ($query) => $query->where('total_amount', '>', 10000))
                    ->toggle(),
            ])
            ->headerActions([])
            ->actions([
                Tables\Actions\ViewAction::make()
                    ->infolist([
                        // üìã –û–°–ù–û–í–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø
                        Group::make([
                            TextEntry::make('order_number')
                                ->label('–ù–æ–º–µ—Ä –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è')
                                ->color('primary')
                                ->weight('bold')
                                ->size('lg'),
                            TextEntry::make('statusName')
                                ->label('–°—Ç–∞—Ç—É—Å')
                                ->badge()
                                ->color(fn (string $state): string => match ($state) {
                                    '–ù–æ–≤–µ' => 'warning',
                                    '–û—á—ñ–∫—É—î –æ–ø–ª–∞—Ç–∏' => 'danger',
                                    '–ß–∞—Å—Ç–∫–æ–≤–æ –æ–ø–ª–∞—á–µ–Ω–æ' => 'warning',
                                    '–û–ø–ª–∞—á–µ–Ω–æ' => 'success',
                                    '–û–±—Ä–æ–±–ª—è—î—Ç—å—Å—è' => 'info',
                                    '–í–∏–∫–æ–Ω–∞–Ω–æ' => 'success',
                                    '–°–∫–∞—Å–æ–≤–∞–Ω–æ' => 'danger',
                                }),
                            TextEntry::make('created_at')
                                ->label('–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è')
                                ->dateTime('d.m.Y H:i')
                                ->color('gray'),
                        ])
                        ->columns(3)
                        ->label('üìã –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è'),

                        // üë§ –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ö–õ–Ü–Ñ–ù–¢–ê
                        Group::make([
                            TextEntry::make('member.full_name')
                                ->label('–ü–Ü–ë –ö–ª—ñ—î–Ω—Ç–∞')
                                ->color('primary')
                                ->weight('bold'),
                            TextEntry::make('member.phone')
                                ->label('–¢–µ–ª–µ—Ñ–æ–Ω')
                                ->color('primary'),
                            TextEntry::make('member.email')
                                ->label('Email')
                                ->color('primary'),
                        ])
                        ->columns(3)
                        ->label('üë§ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞'),

                        // üí∞ –§–Ü–ù–ê–ù–°–û–í–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø
                        Group::make([
                            TextEntry::make('total_amount')
                                ->label('–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞')
                                ->money('UAH')
                                ->color('info')
                                ->weight('bold')
                                ->size('lg'),
                            TextEntry::make('discount_percent')
                                ->label('–ó–Ω–∏–∂–∫–∞ %')
                                ->formatStateUsing(fn ($state) => $state ? $state . '%' : '0%')
                                ->color('success'),
                            TextEntry::make('discount_amount')
                                ->label('–°—É–º–∞ –∑–Ω–∏–∂–∫–∏')
                                ->money('UAH')
                                ->color('success'),
                            TextEntry::make('final_amount')
                                ->label('–î–æ —Å–ø–ª–∞—Ç–∏')
                                ->money('UAH')
                                ->color('primary')
                                ->weight('bold'),
                        ])
                        ->columns(4),

                        Group::make([
                            TextEntry::make('paid_amount')
                                ->label('–°–ø–ª–∞—á–µ–Ω–æ')
                                ->money('UAH')
                                ->color('success')
                                ->weight('bold'),
                            TextEntry::make('remaining_amount')
                                ->label('–ó–∞–ª–∏—à–æ–∫')
                                ->money('UAH')
                                ->color(fn ($record) => $record->remaining_amount > 0 ? 'danger' : 'success')
                                ->weight('bold'),
                            TextEntry::make('paymentStatusName')
                                ->label('–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏')
                                ->badge()
                                ->color(fn (string $state): string => match ($state) {
                                    '–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ' => 'danger',
                                    '–ß–∞—Å—Ç–∫–æ–≤–æ –æ–ø–ª–∞—á–µ–Ω–æ' => 'warning',
                                    '–û–ø–ª–∞—á–µ–Ω–æ' => 'success',
                                    '–ü–µ—Ä–µ–ø–ª–∞—á–µ–Ω–æ' => 'info',
                                }),
                        ])
                        ->columns(3)
                        ->label('üí∞ –§—ñ–Ω–∞–Ω—Å–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è'),

                        // üõí –¢–û–í–ê–†–ò –ó–ê–ú–û–í–õ–ï–ù–ù–Ø
                        Group::make([
                            TextEntry::make('orderItems')
                                ->label('–¢–æ–≤–∞—Ä–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
                                ->formatStateUsing(function ($record) {
                                    if ($record->orderItems->isEmpty()) {
                                        return '–ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤';
                                    }
                                    
                                    $items = [];
                                    $totalItems = 0;
                                    $totalAmount = 0;
                                    
                                    foreach ($record->orderItems as $index => $item) {
                                        $productName = $item->product->name;
                                        if ($item->productOption) {
                                            $productName .= ' (' . $item->productOption->name . ')';
                                        }
                                        
                                        $itemTotal = $item->quantity * $item->price;
                                        $totalItems += $item->quantity;
                                        $totalAmount += $itemTotal;
                                        
                                        $items[] = "**" . ($index + 1) . ".** {$productName}\n" .
                                                  "   –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {$item->quantity} —à—Ç.\n" .
                                                  "   –¶—ñ–Ω–∞: " . number_format($item->price, 2) . " –≥—Ä–Ω\n" .
                                                  "   –°—É–º–∞: **" . number_format($itemTotal, 2) . " –≥—Ä–Ω**";
                                    }
                                    
                                    $items[] = "\n---\n**–í—Å—å–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤:** {$totalItems} —à—Ç.\n**–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞:** " . number_format($totalAmount, 2) . " –≥—Ä–Ω";
                                    
                                    return implode("\n\n", $items);
                                })
                                ->columnSpanFull()
                                ->markdown(),
                        ])
                        ->label('üõí –¢–æ–≤–∞—Ä–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'),

                        // üí≥ –ü–õ–ê–¢–ï–ñ–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø
                        Group::make([
                            TextEntry::make('paymentType.name')
                                ->label('–¢–∏–ø –æ–ø–ª–∞—Ç–∏')
                                ->color('info'),
                            TextEntry::make('cashRegister.name')
                                ->label('–ö–∞—Å–∞')
                                ->color('info'),
                        ])
                        ->columns(2)
                        ->label('üí≥ –ü–ª–∞—Ç—ñ–∂–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è'),

                        // üì∏ –ö–í–ò–¢–ê–ù–¶–Ü–Ø
                        Group::make([
                            ImageEntry::make('payment_receipt')
                                ->label('–§–æ—Ç–æ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó')
                                ->height(300)
                                ->visible(fn ($record) => !empty($record->payment_receipt)),
                        ])
                        ->columns(1)
                        ->label('üì∏ –ö–≤–∏—Ç–∞–Ω—Ü—ñ—è'),

                        // üöö –î–ê–ù–Ü –î–û–°–¢–ê–í–ö–ò
                        Group::make([
                            TextEntry::make('shipping_name')
                                ->label('–ü–Ü–ë –û—Ç—Ä–∏–º—É–≤–∞—á–∞')
                                ->color('primary')
                                ->weight('bold'),
                            TextEntry::make('shipping_phone')
                                ->label('–¢–µ–ª–µ—Ñ–æ–Ω –æ—Ç—Ä–∏–º—É–≤–∞—á–∞')
                                ->color('primary'),
                            TextEntry::make('shipping_city')
                                ->label('–ú—ñ—Å—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏')
                                ->color('primary'),
                            TextEntry::make('shipping_carrier')
                                ->label('–°–ø–æ—Å—ñ–± –¥–æ—Å—Ç–∞–≤–∫–∏')
                                ->color('info'),
                            TextEntry::make('shipping_office')
                                ->label('–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è')
                                ->color('info'),
                        ])
                        ->columns(2)
                        ->label('üöö –î–∞–Ω—ñ –¥–æ—Å—Ç–∞–≤–∫–∏'),

                        // üìù –ù–û–¢–ê–¢–ö–ò
                        Group::make([
                            TextEntry::make('notes')
                                ->label('–ù–æ—Ç–∞—Ç–∫–∏')
                                ->columnSpanFull()
                                ->visible(fn ($record) => !empty($record->notes)),
                        ])
                        ->label('üìù –ù–æ—Ç–∞—Ç–∫–∏'),
                    ])
//                Tables\Actions\ViewAction::make(),
//                Tables\Actions\EditAction::make(),
            ])
            ->bulkActions([])
            ->defaultSort('created_at', 'desc')
            ->striped()
            ->paginated([10, 25, 50])
            ->poll('30s');
    }
}
