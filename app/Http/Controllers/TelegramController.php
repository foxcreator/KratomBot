<?php

namespace App\Http\Controllers;

use App\Models\Member;
use App\Models\Setting;
use App\Models\Product;
use Illuminate\Support\Facades\Log;
use Telegram\Bot\FileUpload\InputFile;
use Mockery\Exception;
use Telegram\Bot\Api;
use Telegram\Bot\Laravel\Facades\Telegram;
use App\Models\Order;
use App\Models\Brand;

class TelegramController extends Controller
{
    protected $telegram;
    protected $channelsUsername;
    protected $settings;

    public function __construct()
    {
        $this->telegram = new Api(env('TELEGRAM_BOT_TOKEN'));
        $this->settings = Setting::all()->pluck('value', 'key')->toArray();
    }

    public function setWebhook()
    {
        $url = env('APP_URL').'/telegram/webhook'; // –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø—É–±–ª–∏—á–Ω—ã–π URL, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç ngrok
        $response = $this->telegram->setWebhook(['url' => $url]);

        return response()->json($response);
    }
    public function webhook()
    {
        try {
            $update = Telegram::getWebhookUpdates();

            if ($update->isType('callback_query')) {
                $chatId = $update->getCallbackQuery()->getMessage()->getChat()->getId();
                $data = $update->getCallbackQuery()->getData();
                $this->handleCallback($chatId, $data);
            } elseif ($update->isType('message')) {
                $chatId = $update->getMessage()->getChat()->getId();
                $username = $update->getMessage()->getFrom()->getUsername();
                $text = $update->getMessage()->getText();

                Member::updateOrCreate(
                    ['telegram_id' => $chatId],
                    ['username' => $username, 'phone' => random_int(2, 10000000)]
                );

                if ($text === '/start') {
                    $this->sendWelcome($chatId, $username);
                } else {
                    $this->handleText($chatId, $text);
                }
            }
        } catch (\Exception $exception) {
            Log::error($exception->getMessage());
        }
    }

    private function sendWelcome($chatId, $username)
    {
        $text = !empty($this->settings['helloMessage']) ? $this->settings['helloMessage'] : "–í—ñ—Ç–∞—î–º–æ, @$username!\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:";
        $this->sendMainMenu($chatId, $text);
        if (!empty($this->settings['channel'])) {
            Telegram::sendMessage([
                'chat_id' => $chatId,
                'text' => '–ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ –Ω–∞—à –∫–∞–Ω–∞–ª: ' . $this->settings['channel']
            ]);
        }
    }

    private function sendMainMenu($chatId, $text = null)
    {
        $keyboard = [
            [
                ['text' => 'üì¶ –ö–∞—Ç–∞–ª–æ–≥', 'callback_data' => 'catalog'],
                ['text' => 'üî• –¢–æ–ø –ø—Ä–æ–¥–∞–∂', 'callback_data' => 'top_sales'],
            ],
            [
                ['text' => 'üìò –Ø–∫ –∑–∞–º–æ–≤–∏—Ç–∏', 'callback_data' => 'how_to_order'],
                ['text' => 'üí≥ –û–ø–ª–∞—Ç–∞', 'callback_data' => 'payment'],
            ],
            [
                ['text' => '‚≠êÔ∏è –í—ñ–¥–≥—É–∫–∏', 'callback_data' => 'reviews'],
            ],
        ];
        Telegram::sendMessage([
            'chat_id' => $chatId,
            'text' => $text ?? '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:',
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard])
        ]);
    }

    private function handleCallback($chatId, $data)
    {
        switch (true) {
            case $data === 'catalog':
                $this->sendCatalogMenu($chatId);
                break;
            case $data === 'top_sales':
                $products = Product::where('is_top_sales', true)->get();
                if ($products->count() > 0) {
                    foreach ($products as $index => $product) {
                        $caption = ($index+1) . ". <b>{$product->name}</b>\n";
                        $caption .= "üí∞ {$product->price} –≥—Ä–Ω";
                        $localPath = public_path($product->image_url);
                        if (file_exists($localPath)) {
                            $photo = InputFile::create($localPath, basename($localPath));
                        } else {
                            $photo = $product->image_url;
                        }
                        $keyboard = [
                            [
                                ['text' => 'üõí –ü—Ä–∏–¥–±–∞—Ç–∏', 'callback_data' => 'buy_product_' . $product->id]
                            ]
                        ];
                        Telegram::sendPhoto([
                            'chat_id' => $chatId,
                            'photo' => $photo,
                            'caption' => $caption,
                            'parse_mode' => 'HTML',
                            'reply_markup' => json_encode(['inline_keyboard' => $keyboard])
                        ]);
                    }
                } else {
                    Telegram::sendMessage([
                        'chat_id' => $chatId,
                        'text' => "–¢–æ–ø –ø—Ä–æ–¥–∞–∂ –ø–æ–∫–∏ —â–æ –ø–æ—Ä–æ–∂–Ω—ñ–π."
                    ]);
                }
                $this->sendMainMenu($chatId);
                break;
            case $data === 'how_to_order':
                Telegram::sendMessage([
                    'chat_id' => $chatId,
                    'text' => "<b>–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è —è–∫ –∑–∞–º–æ–≤–∏—Ç–∏:</b> \n\n" . $this->settings['howOrdering'],
                    'parse_mode' => 'HTML'
                ]);
                $this->sendMainMenu($chatId);
                break;
            case $data === 'payment':
                Telegram::sendMessage([
                    'chat_id' => $chatId,
                    'text' => "<b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –æ–ø–ª–∞—Ç—É:</b> \n\n" . $this->settings['payment'],
                    'parse_mode' => 'HTML'
                ]);
                $this->sendMainMenu($chatId);
                break;
            case $data === 'reviews':
                Telegram::sendMessage([
                    'chat_id' => $chatId,
                    'text' => '<b>–í—ñ–¥–≥—É–∫–∏ –Ω–∞—à–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤:</b> '
                ]);
                $this->sendMainMenu($chatId);
                break;
            case $data === 'catalog_moringa':
                $this->sendMoringaMenu($chatId);
                break;
            case $data === 'catalog_analogs':
                $this->sendAnalogsMenu($chatId);
                break;
            case (preg_match('/^brand_menu_(\\d+)$/', $data, $matches) ? true : false):
                $brandId = $matches[1];
                $this->sendBrandAnalogMenu($chatId, $brandId);
                break;
            case (preg_match('/^brand_about_(\\d+)$/', $data, $matches) ? true : false):
                $brandId = $matches[1];
                $brand = Brand::find($brandId);
                Telegram::sendMessage([
                    'chat_id' => $chatId,
                    'text' => '–ü—Ä–æ –±—Ä–µ–Ω–¥ ' . $brand->name . ": \n\n" . $brand->description
                ]);
                $this->sendBrandAnalogMenu($chatId, $brandId);
                break;
            case (preg_match('/^brand_price_(\\d+)$/', $data, $matches) ? true : false):
                $brandId = $matches[1];
                $brand = Brand::find($brandId);
                Telegram::sendMessage([
                    'chat_id' => $chatId,
                    'text' => '–ü—Ä–∞–π—Å –Ω–∞ –±—Ä–µ–Ω–¥ ' . $brand->name . ": \n\n" . $brand->price,
                    'parse_mode' => 'HTML'
                ]);
                $this->sendBrandAnalogMenu($chatId, $brandId);
                break;
            case str_starts_with($data, 'buy_product_'):
                $productId = (int)str_replace('buy_product_', '', $data);
                $member = Member::where('telegram_id', $chatId)->first();
                if ($member) {
                    Order::create([
                        'member_id' => $member->id,
                        'product_id' => $productId,
                        'status' => 'new',
                    ]);
                }
                Telegram::sendMessage([
                    'chat_id' => $chatId,
                    'text' => '–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–≤ º—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.'
                ]);
                $this->sendMainMenu($chatId);
                break;
            case (preg_match('/^brand_products_(\\d+)$/', $data, $matches) ? true : false):
                $brandId = $matches[1];
                $this->sendBrandProductsMenu($chatId, $brandId);
                break;
            case $data === 'moringa_products':
                $this->sendBrandProductsMenu($chatId, Brand::where('name', 'Moringa')->first()->id);
                break;
            default:
                $this->sendMainMenu($chatId);
                break;
        }
    }

    private function handleText($chatId, $text)
    {
        $this->sendMainMenu($chatId);
    }

    private function sendCatalogMenu($chatId)
    {
        $keyboard = [
            [
                ['text' => 'üåø Moringa', 'callback_data' => 'catalog_moringa'],
            ],
            [
                ['text' => 'üß™ –ê–Ω–∞–ª–æ–≥–∏', 'callback_data' => 'catalog_analogs'],
            ],
            [
                ['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data' => 'back_to_main'],
            ],
        ];
        Telegram::sendMessage([
            'chat_id' => $chatId,
            'text' => '–ö–∞—Ç–∞–ª–æ–≥:',
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard])
        ]);
    }

    private function sendMoringaMenu($chatId)
    {
        $keyboard = [
            [
                ['text' => 'üìò –ü—Ä–æ –ø—Ä–æ–¥—É–∫—Ç', 'callback_data' => 'moringa_about'],
            ],
            [
                ['text' => 'üí∞ –ü—Ä–∞–π—Å', 'callback_data' => 'moringa_price'],
            ],
            [
                ['text' => 'üõç –¢–æ–≤–∞—Ä–∏ –±—Ä–µ–Ω–¥—É', 'callback_data' => 'moringa_products'],
            ],
            [
                ['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data' => 'back_to_catalog'],
            ],
        ];
        Telegram::sendMessage([
            'chat_id' => $chatId,
            'text' => 'üåø Moringa:',
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard])
        ]);
    }

    private function sendAnalogsMenu($chatId)
    {
        $brands = Brand::where('name', '!=', 'Moringa')->get();
        $keyboard = [];
        foreach ($brands as $brand) {
            $keyboard[] = [
                ['text' => $brand->name, 'callback_data' => 'brand_menu_' . $brand->id]
            ];
        }
        $keyboard[] = [
            ['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data' => 'back_to_catalog'],
        ];
        Telegram::sendMessage([
            'chat_id' => $chatId,
            'text' => 'üß™ –ê–Ω–∞–ª–æ–≥–∏:',
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard])
        ]);
    }

    private function sendBrandAnalogMenu($chatId, $brandId)
    {
        $brand = Brand::find($brandId);
        $keyboard = [
            [
                ['text' => 'üìò –ü—Ä–æ —Ç–æ–≤–∞—Ä', 'callback_data' => 'brand_about_' . $brandId],
            ],
            [
                ['text' => 'üí∞ –ü—Ä–∞–π—Å', 'callback_data' => 'brand_price_' . $brandId],
            ],
            [
                ['text' => 'üõç –¢–æ–≤–∞—Ä–∏ –±—Ä–µ–Ω–¥—É', 'callback_data' => 'brand_products_' . $brandId],
            ],
            [
                ['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data' => 'catalog_analogs'],
            ],
        ];
        Telegram::sendMessage([
            'chat_id' => $chatId,
            'text' => '–ë—Ä–µ–Ω–¥: ' . $brand->name,
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard])
        ]);
    }

    private function sendBrandProductsMenu($chatId, $brandId)
    {
        $products = Product::where('brand_id', $brandId)->get();
        if ($products->count() > 0) {
            foreach ($products as $product) {
                $caption = "<b>{$product->name}</b>\n";
                $caption .= "{$product->description}\n";
                $caption .= "üí∞ {$product->price} –≥—Ä–Ω";
                $keyboard = [
                    [
                        ['text' => 'üõí –ü—Ä–∏–¥–±–∞—Ç–∏', 'callback_data' => 'buy_product_' . $product->id]
                    ]
                ];

                if (!empty($product->image_url)) {
                    $localPath = public_path($product->image_url);
                    if (file_exists($localPath)) {
                        $photo = \Telegram\Bot\FileUpload\InputFile::create($localPath, basename($localPath));
                    } else {
                        $photo = $product->image_url;
                    }

                    Telegram::sendPhoto([
                        'chat_id' => $chatId,
                        'photo' => $photo,
                        'caption' => $caption,
                        'parse_mode' => 'HTML',
                        'reply_markup' => json_encode(['inline_keyboard' => $keyboard])
                    ]);
                } else {
                    Telegram::sendMessage([
                        'chat_id' => $chatId,
                        'text' => $caption,
                        'parse_mode' => 'HTML',
                        'reply_markup' => json_encode(['inline_keyboard' => $keyboard])
                    ]);
                }
            }
        } else {
            Telegram::sendMessage([
                'chat_id' => $chatId,
                'text' => '–£ —Ü—å–æ–≥–æ –±—Ä–µ–Ω–¥—É —â–µ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤.'
            ]);
        }
        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –º–µ–Ω—é –∞–Ω–∞–ª–æ–≥—ñ–≤
        $this->sendAnalogsMenu($chatId);
    }
}
