<?php

namespace App\Http\Controllers;

use App\Http\Services\TelegramOrderNotifier;
use App\Models\Member;
use App\Models\Setting;
use App\Models\Product;
use App\Models\CartItem;
use App\Models\OrderItem;
use App\Settings\TelegramSetting;
use Illuminate\Support\Facades\Log;
use Telegram\Bot\FileUpload\InputFile;
use Telegram\Bot\Api;
use Telegram\Bot\Laravel\Facades\Telegram;
use App\Models\Order;
use App\Models\Brand;
use App\Models\ProductOption;
use App\Models\Subcategory;

class TelegramController extends Controller
{
    protected $telegram;
    protected $channelsUsername;
    protected $settings;

    const CHECKOUT_STATE = [
        'AWAIT_PAYMENT_TYPE' => 'await_payment_type',
        'AWAIT_RECEIPT_PHOTO' => 'await_receipt_photo',
        'AWAIT_SHIPPING_PHONE' => 'await_shipping_phone',
        'AWAIT_SHIPPING_CITY' => 'await_shipping_city',
        'AWAIT_SHIPPING_CARRIER' => 'await_shipping_carrier',
        'AWAIT_SHIPPING_OFFICE' => 'await_shipping_office',
        'AWAIT_SHIPPING_NAME' => 'await_shipping_name',
    ];

    public function __construct()
    {
        $this->telegram = new Api(env('TELEGRAM_BOT_TOKEN'));
        $this->settings = app(TelegramSetting::class);
    }

    public function setWebhook()
    {
        $url = env('APP_URL').'/telegram/webhook';
        $response = $this->telegram->setWebhook(['url' => $url]);

        return response()->json($response);
    }
    public function webhook()
    {
        try {
            $update = Telegram::getWebhookUpdates();

            if ($update->isType('callback_query')) {
                $chatId = $update->getCallbackQuery()->getMessage()->getChat()->getId();
                $data = $update->getCallbackQuery()->getData();
                $this->handleCallback($chatId, $data);
            } elseif ($update->isType('message')) {
                $chatId = $update->getMessage()->getChat()->getId();
                $username = $update->getMessage()->getFrom()->getUsername();
                $text = $update->getMessage()->getText();

                $member = \App\Models\Member::query()->firstOrNew(['telegram_id' => $chatId]);

                $member->username = $username;
                if (is_null($member->full_name)) {
                    $member->full_name = $username;
                }

                $member->save();

                if ($update->getMessage()->has('photo')) {
                    $photoSizes = $update->getMessage()->get('photo');
                    if ($photoSizes instanceof \Illuminate\Support\Collection) {
                        $photoSizes = $photoSizes->toArray();
                    }
                    if (is_array($photoSizes) && count($photoSizes) > 0) {
                        $largestPhoto = $photoSizes[array_key_last($photoSizes)];
                        $this->handlePhoto($chatId, $largestPhoto);
                        return;
                    }
                }

                if ($text === '/start') {
                    $this->sendWelcome($chatId, $username);
                } else {
                    $this->handleText($chatId, $text);
                }
            }
        } catch (\Exception $exception) {
            Log::error($exception->getMessage());
        }
    }

    private function sendWelcome($chatId, $username)
    {
        $rawText = !empty($this->settings->hello_message) ? $this->settings->hello_message : "–í—ñ—Ç–∞—î–º–æ, {{ username }}!\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:";
        $text = $this->replacePlaceholders($rawText, ['username' => '@' . $username]);
        $this->sendMainMenu($chatId, $text);
        if (!empty($this->settings->channel)) {
            Telegram::sendMessage([
                'chat_id' => $chatId,
                'text' => $this->settings->channel
            ]);
        }
    }

    private function sendMainMenu($chatId, $text = null)
    {
        $member = Member::where('telegram_id', $chatId)->first();
        
        $this->sendMessageWithCleanup($chatId, $member, [
            'chat_id' => $chatId,
            'text' => $text ?? '‚òù',
            'reply_markup' => json_encode(['keyboard' => $this->getMainMenuKeyboard($chatId), 'resize_keyboard' => true])
        ]);
    }

    private function showCart($chatId)
    {
        $member = Member::where('telegram_id', $chatId)
            ->with(['cartItems.productOption', 'cartItems.product'])
            ->first();
        if (!$member || $member->cartItems->isEmpty()) {
            Telegram::sendMessage([
                'chat_id' => $chatId,
                'text' => 'üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π',
                'reply_markup' => json_encode(['keyboard' => $this->getMainMenuKeyboard($chatId), 'resize_keyboard' => true])
            ]);
            return;
        }
        $message = "üõí <b>–í–∞—à –∫–æ—à–∏–∫:</b>\n\n";
        $total = 0;
        $inlineKeyboard = [];
        foreach ($member->cartItems as $item) {
            $product = $item->product;
            $option = $item->productOption;
            $itemPrice = $option ? $option->price : $product->price;
            $itemTotal = $item->quantity * (float) $itemPrice;
            $total += $itemTotal;

            $message .= "üì¶ <b>{$product->name}</b>";
            if ($option) {
                $message .= " <em>({$option->name})</em>";
            }
            $message .= "\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {$item->quantity} —à—Ç.\n";
            $message .= "–¶—ñ–Ω–∞: {$itemPrice} –≥—Ä–Ω √ó {$item->quantity} = <b>{$itemTotal} –≥—Ä–Ω</b>\n\n";

            $inlineKeyboard[] = [
                ['text' => '‚ûñ', 'callback_data' => 'decrease_quantity_' . $item->id],
                ['text' => $item->quantity, 'callback_data' => 'quantity_' . $item->id],
                ['text' => '‚ûï', 'callback_data' => 'increase_quantity_' . $item->id],
                ['text' => 'üóë', 'callback_data' => 'remove_from_cart_' . $item->id]
            ];
        }

        $discountPercent = isset($this->settings->telegram_channel_discount) ? (float)$this->settings->telegram_channel_discount : 0;

        $message .= "üí∞ <b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {$total} –≥—Ä–Ω</b>";

        if ($this->isUserSubscribedToChannel($chatId) && $discountPercent > 0) {
            $discountAmount = round($total * $discountPercent / 100, 2);
            $totalWithDiscount = $total - $discountAmount;
            $message .= "\nüéÅ <b>–í–∞—à–∞ –∑–Ω–∏–∂–∫–∞: {$discountPercent}% (-{$discountAmount} –≥—Ä–Ω)</b>";
            $message .= "\nüí∏ <b>–°—É–º–∞ –∑—ñ –∑–Ω–∏–∂–∫–æ—é: {$totalWithDiscount} –≥—Ä–Ω</b>";
        }

        $inlineKeyboard[] = [
            ['text' => 'üí≥ –ó–∞–º–æ–≤–∏—Ç–∏ –∑–∞—Ä–∞–∑', 'callback_data' => 'checkout_cart'],
            ['text' => 'üóë –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫', 'callback_data' => 'clear_cart']
        ];
        Telegram::sendMessage([
            'chat_id' => $chatId,
            'text' => $message,
            'parse_mode' => 'HTML',
            'reply_markup' => json_encode(['inline_keyboard' => $inlineKeyboard])
        ]);
    }

    private function checkoutCart($chatId)
    {
        $member = Member::where('telegram_id', $chatId)->first();
        if (!$member || $member->cartItems->isEmpty()) {
            Telegram::answerCallbackQuery([
                'callback_query_id' => $this->getCallbackQueryId(),
                'text' => '–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π'
            ]);
            return;
        }
        $activeOrders = Order::where('member_id', $member->id)
            ->whereIn('status', ['new', 'processing'])
            ->count();
        if ($activeOrders > 0) {
            Telegram::sendMessage([
                'chat_id' => $chatId,
                'text' => "–£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ—á–µ–∫–∞–π—Ç–µ—Å—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ ‚è≥\n–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤ º—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º üìû",
                'reply_markup' => json_encode(['keyboard' => $this->getMainMenuKeyboard($chatId), 'resize_keyboard' => true])
            ]);
            return;
        }

        $hasOrders = Order::where('member_id', $member->id)->exists();
        $keyboard = [
            [['text' => 'üí≥ –ü–µ—Ä–µ–¥–ø–ª–∞—Ç–∞', 'callback_data' => 'pay_type_prepaid']],
        ];
        if (!$hasOrders) {
            $keyboard[] = [['text' => 'üöö –ù–∞–∫–ª–∞–¥–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂', 'callback_data' => 'pay_type_cod']];
        }
        $this->sendMessageWithCleanup($chatId, $member, [
            'chat_id' => $chatId,
            'text' => "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:\n\n<b>–ü–µ—Ä–µ–¥–ø–ª–∞—Ç–∞</b> ‚Äî –æ–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–∫—É, –ø—ñ—Å–ª—è —á–æ–≥–æ –≤–∏ –Ω–∞–¥—Å–∏–ª–∞—î—Ç–µ —Ñ–æ—Ç–æ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó.\n<b>–ù–∞–∫–ª–∞–¥–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂</b> ‚Äî –æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ (–¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏—à–µ –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è).",
            'parse_mode' => 'HTML',
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard])
        ]);
        $state = $member->checkout_state ?? [];
        $state['step'] = self::CHECKOUT_STATE['AWAIT_PAYMENT_TYPE'];
        $state['cart_snapshot'] = $member->cartItems->map(function($item) {
            return [
                'product_id' => $item->product_id,
                'product_option_id' => $item->product_option_id,
                'quantity' => $item->quantity,
            ];
        })->toArray();
        $state['total'] = $member->cartItems->sum(function($item) {
            return $item->quantity * ($item->productOption ? $item->productOption->price : $item->product->price);
        });
        $member->checkout_state = $state;
        $member->save();




        $state = $member->checkout_state ?? [];
        $state['step'] = self::CHECKOUT_STATE['AWAIT_PAYMENT_TYPE'];
        $state['cart_snapshot'] = $member->cartItems->map(function($item) {
            return [
                'product_id' => $item->product_id,
                'product_option_id' => $item->product_option_id,
                'quantity' => $item->quantity,
            ];
        })->toArray();
        $state['total'] = $member->cartItems->sum(function($item) {
            return $item->quantity * ($item->productOption ? $item->productOption->price : $item->product->price);
        });
        $member->checkout_state = $state;
        $member->save();
    }

    private function clearCart($chatId)
    {
        $member = Member::where('telegram_id', $chatId)->first();

        if ($member) {
            $member->cartItems()->delete();
        }

        Telegram::answerCallbackQuery([
            'callback_query_id' => $this->getCallbackQueryId(),
            'text' => '–ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–∏–π'
        ]);

        Telegram::sendMessage([
            'chat_id' => $chatId,
            'text' => 'üóë –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–∏–π',
            'reply_markup' => json_encode(['keyboard' => $this->getMainMenuKeyboard($chatId), 'resize_keyboard' => true])
        ]);
    }

    private function addToCart($chatId, $productId)
    {
        $member = Member::where('telegram_id', $chatId)->first();
        $product = Product::find($productId);
        if (!$member || !$product) {
            Telegram::answerCallbackQuery([
                'callback_query_id' => $this->getCallbackQueryId(),
                'text' => '–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É'
            ]);
            return;
        }
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–∞–∫–æ–≥–æ –∑–∞–ø–∏—Å—É
        $cartItem = CartItem::where('member_id', $member->id)
            ->where('product_id', $productId)
            ->whereNull('product_option_id')
            ->first();
        if ($cartItem) {
            $cartItem->increment('quantity');
        } else {
            try {
                CartItem::create([
                    'member_id' => $member->id,
                    'product_id' => $productId,
                    'quantity' => 1
                ]);
            } catch (\Exception $e) {
                // –Ø–∫—â–æ –¥—É–±–ª—å ‚Äî –ø—Ä–æ—Å—Ç–æ —ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç—É—î–º–æ
                $cartItem = CartItem::where('member_id', $member->id)
                    ->where('product_id', $productId)
                    ->whereNull('product_option_id')
                    ->first();
                if ($cartItem) {
                    $cartItem->increment('quantity');
                }
            }
        }
        Telegram::answerCallbackQuery([
            'callback_query_id' => $this->getCallbackQueryId(),
            'text' => "‚úÖ {$product->name} –¥–æ–¥–∞–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É"
        ]);
    }

    private function removeFromCart($chatId, $itemId)
    {
        $member = Member::where('telegram_id', $chatId)->first();

        if ($member) {
            CartItem::where('member_id', $member->id)
                   ->where('id', $itemId)
                   ->delete();
        }

        Telegram::answerCallbackQuery([
            'callback_query_id' => $this->getCallbackQueryId(),
            'text' => '–¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–æ—Ä–∑–∏–Ω–∏'
        ]);

        // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∑–∏–Ω–∏
        $this->updateCartMessage($chatId);
    }

    private function changeQuantity($chatId, $itemId, $change)
    {
        $member = Member::where('telegram_id', $chatId)->first();

        if (!$member) {
            return;
        }

        $cartItem = CartItem::where('member_id', $member->id)
                           ->where('id', $itemId)
                           ->first();

        if (!$cartItem) {
            return;
        }

        $newQuantity = $cartItem->quantity + $change;

        if ($newQuantity <= 0) {
            $cartItem->delete();
            Telegram::answerCallbackQuery([
                'callback_query_id' => $this->getCallbackQueryId(),
                'text' => '–¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–æ—Ä–∑–∏–Ω–∏'
            ]);
        } else {
            $cartItem->update(['quantity' => $newQuantity]);
            Telegram::answerCallbackQuery([
                'callback_query_id' => $this->getCallbackQueryId(),
                'text' => "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–æ: {$newQuantity}"
            ]);
        }

        $this->updateCartMessage($chatId);
    }

    private function updateCartMessage($chatId)
    {
        $member = Member::where('telegram_id', $chatId)->first();

        if (!$member || $member->cartItems->isEmpty()) {
            Telegram::sendMessage([
                'chat_id' => $chatId,
                'text' => 'üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π',
                'reply_markup' => json_encode(['keyboard' => $this->getMainMenuKeyboard($chatId), 'resize_keyboard' => true])
            ]);
            return;
        }

        $message = "üõí <b>–í–∞—à –∫–æ—à–∏–∫:</b>\n\n";
        $total = 0;
        $inlineKeyboard = [];

        foreach ($member->cartItems as $item) {
            $product = $item->product;
            $option = $item->productOption;
            $itemPrice = $option ? $option->price : $product->price;
            $itemTotal = $item->quantity * (float) $itemPrice;
            $total += $itemTotal;

            $message .= "üì¶ <b>{$product->name}</b>";
            if ($option) {
                $message .= " <em>({$option->name})</em>";
            }
            $message .= "\n   –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {$item->quantity} —à—Ç.\n";
            $message .= "   –¶—ñ–Ω–∞: {$itemPrice} –≥—Ä–Ω √ó {$item->quantity} = {$itemTotal} –≥—Ä–Ω\n\n";

            $inlineKeyboard[] = [
                ['text' => '‚ûñ', 'callback_data' => 'decrease_quantity_' . $item->id],
                ['text' => $item->quantity, 'callback_data' => 'quantity_' . $item->id],
                ['text' => '‚ûï', 'callback_data' => 'increase_quantity_' . $item->id],
                ['text' => 'üóë', 'callback_data' => 'remove_from_cart_' . $item->id]
            ];
        }

        $discountPercent = isset($this->settings->telegram_channel_discount) ? (float)$this->settings->telegram_channel_discount : 0;

        $message .= "üí∞ <b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {$total} –≥—Ä–Ω</b>";

        if ($this->isUserSubscribedToChannel($chatId) && $discountPercent > 0) {
            $discountAmount = round($total * $discountPercent / 100, 2);
            $totalWithDiscount = $total - $discountAmount;
            $message .= "\nüéÅ <b>–í–∞—à–∞ –∑–Ω–∏–∂–∫–∞: {$discountPercent}% (-{$discountAmount} –≥—Ä–Ω)</b>";
            $message .= "\nüí∏ <b>–°—É–º–∞ –∑—ñ –∑–Ω–∏–∂–∫–æ—é: {$totalWithDiscount} –≥—Ä–Ω</b>";
        }

        $inlineKeyboard[] = [
            ['text' => 'üí≥ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', 'callback_data' => 'checkout_cart'],
            ['text' => 'üóë –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É', 'callback_data' => 'clear_cart']
        ];
        $inlineKeyboard[] = [
            ['text' => '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'callback_data' => 'back_to_previous']
        ];

        $update = Telegram::getWebhookUpdates();
        $messageId = $update->getCallbackQuery()->getMessage()->getMessageId();

        Telegram::editMessageText([
            'chat_id' => $chatId,
            'message_id' => $messageId,
            'text' => $message,
            'parse_mode' => 'HTML',
            'reply_markup' => json_encode(['inline_keyboard' => $inlineKeyboard])
        ]);
    }

    private function getCallbackQueryId()
    {
        $update = Telegram::getWebhookUpdates();
        return $update->getCallbackQuery()->getId();
    }

    private function handleText($chatId, $text)
    {
        $member = Member::where('telegram_id', $chatId)->first();
        if ($member && $member->checkout_state && isset($member->checkout_state['step'])) {
            $state = $member->checkout_state;
            $step = $state['step'];
            if ($step === self::CHECKOUT_STATE['AWAIT_SHIPPING_PHONE']) {
                $state['shipping_phone'] = $text;
                $state['step'] = self::CHECKOUT_STATE['AWAIT_SHIPPING_CITY'];
                $member->checkout_state = $state;
                $member->save();
                $this->sendMessageWithCleanup($chatId, $member, [
                    'chat_id' => $chatId,
                    'text' => "–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:"
                ]);
                return;
            } elseif ($step === self::CHECKOUT_STATE['AWAIT_SHIPPING_CITY']) {
                $state['shipping_city'] = $text;
                $state['step'] = self::CHECKOUT_STATE['AWAIT_SHIPPING_CARRIER'];
                $member->checkout_state = $state;
                $member->save();
                $this->sendMessageWithCleanup($chatId, $member, [
                    'chat_id' => $chatId,
                    'text' => "–û–±–µ—Ä—ñ—Ç—å –ø–æ—à—Ç–æ–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:",
                    'reply_markup' => json_encode(['keyboard' => [['–ù–æ–≤–∞ –ü–æ—à—Ç–∞']], 'resize_keyboard' => true])
                ]);
                return;
            } elseif ($step === self::CHECKOUT_STATE['AWAIT_SHIPPING_CARRIER']) {
                $state['shipping_carrier'] = $text;
                $state['step'] = self::CHECKOUT_STATE['AWAIT_SHIPPING_OFFICE'];
                $member->checkout_state = $state;
                $member->save();
                $this->sendMessageWithCleanup($chatId, $member, [
                    'chat_id' => $chatId,
                    'text' => "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è:",
                    'reply_markup' => json_encode(['remove_keyboard' => true])
                ]);
                return;
            } elseif ($step === self::CHECKOUT_STATE['AWAIT_SHIPPING_OFFICE']) {
                $state['shipping_office'] = $text;
                $state['step'] = self::CHECKOUT_STATE['AWAIT_SHIPPING_NAME'];
                $member->checkout_state = $state;
                $member->save();
                $this->sendMessageWithCleanup($chatId, $member, [
                    'chat_id' => $chatId,
                    'text' => "–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë –æ—Ç—Ä–∏–º—É–≤–∞—á–∞:"
                ]);
                return;
            } elseif ($step === self::CHECKOUT_STATE['AWAIT_SHIPPING_NAME']) {
                $state['shipping_name'] = $text;
                $member->checkout_state = $state;
                $member->save();
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—Å—ñ –¥–∞–Ω—ñ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ
                $requiredFields = [
                    'shipping_phone',
                    'shipping_city',
                    'shipping_carrier',
                    'shipping_office',
                    'shipping_name',
                ];
                $missing = [];
                foreach ($requiredFields as $field) {
                    if (empty($state[$field])) {
                        $missing[] = $field;
                    }
                }
                if (count($missing) === 0) {
                    $this->finalizeOrder($chatId, $state['payment_type'] ?? 'cod');
                } else {
                    // –Ø–∫—â–æ —á–æ–≥–æ—Å—å –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î ‚Äî –ø—Ä–æ—Å–∏–º–æ –≤–≤–µ—Å—Ç–∏ —â–µ —Ä–∞–∑
                    $fieldNames = [
                        'shipping_phone' => '–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É',
                        'shipping_city' => '–º—ñ—Å—Ç–æ',
                        'shipping_carrier' => '–ø–æ—à—Ç–æ–≤–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä',
                        'shipping_office' => '–Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è',
                        'shipping_name' => '–ü–Ü–ë –æ—Ç—Ä–∏–º—É–≤–∞—á–∞',
                    ];
                    $fieldsList = array_map(fn($f) => $fieldNames[$f], $missing);
                    $fieldsText = implode(', ', $fieldsList);
                    $this->sendMessageWithCleanup($chatId, $member, [
                        'chat_id' => $chatId,
                        'text' => "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å: $fieldsText"
                    ]);
                }
                return;
            }
        }
        $replacements = ['username' => ($member && $member->username) ? '@' . $member->username : ''];

        switch ($text) {
            case 'üìÇ –ö–∞—Ç–∞–ª–æ–≥':
                if ($member) {
                    $this->pushHistory($member);
                    $this->setCurrentState($member, ['type' => 'catalog']);
                }
                $this->sendCatalogMenu($chatId);
                break;
            case 'üéÅ –û—Ç—Ä–∏–º–∞–π –∑–Ω–∏–∂–∫—É':
                $discountInfo = $this->settings->discount_info ?? '–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–Ω–∏–∂–∫—É, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª!';
                $this->sendMessageWithCleanup($chatId, $member, [
                    'chat_id' => $chatId,
                    'text' => $discountInfo,
                    'parse_mode' => 'HTML',
                    'reply_markup' => json_encode(['keyboard' => $this->getMainMenuKeyboard($chatId), 'resize_keyboard' => true])
                ]);
                break;
            case 'üî• –¢–æ–ø –ø—Ä–æ–¥–∞–∂—ñ–≤':
                if ($member) {
                    $this->pushHistory($member);
                    $this->setCurrentState($member, ['type' => 'top']);
                }
                $products = Product::where('is_top_sales', true)->get();
                if ($products->count() > 0) {
                    foreach ($products as $index => $product) {
                        $caption = ($index+1) . ". <b>{$product->name}</b>\n";
                        if ($product->options && $product->options->count() > 0) {
                            $inlineKeyboard = [];
                            foreach ($product->options as $option) {
                                $inlineKeyboard[] = [
                                    ['text' => $option->name . ' ‚Äî ' . $option->price . ' –≥—Ä–Ω', 'callback_data' => 'choose_option_' . $option->id]
                                ];
                            }
                        } else {
                            $caption .= "üí∞ {$product->price} –≥—Ä–Ω";
                            $inlineKeyboard = [
                                [
                                    ['text' => 'üõí –ü—Ä–∏–¥–±–∞—Ç–∏ –∑–∞—Ä–∞–∑', 'callback_data' => 'buy_product_' . $product->id],
                                    ['text' => '‚ûï –î–æ–¥–∞—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É', 'callback_data' => 'add_to_cart_' . $product->id]
                                ]
                            ];
                        }
                        $localPath = public_path('/storage/'.$product->image_url);
                        if (file_exists($localPath)) {
                            $photo = InputFile::create($localPath, basename($localPath));
                        } else {
                            $photo = $product->image_url;
                        }
                        Telegram::sendPhoto([
                            'chat_id' => $chatId,
                            'photo' => $photo,
                            'caption' => $caption,
                            'parse_mode' => 'HTML',
                            'reply_markup' => json_encode(['inline_keyboard' => $inlineKeyboard])
                        ]);
                    }

                    Telegram::sendMessage([
                        'chat_id' => $chatId,
                        'text' => "–•—ñ—Ç–∏ –ø—Ä–æ–¥–∞–∂—ñ–≤ ‚Äî –Ω–∞–π—É–ª—é–±–ª–µ–Ω—ñ—à—ñ —Ç–æ–≤–∞—Ä–∏ –Ω–∞—à–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ üèÜ"
                    ]);
                } else {
                    Telegram::sendMessage([
                        'chat_id' => $chatId,
                        'text' => "–¢–æ–ø –ø—Ä–æ–¥–∞–∂—ñ–≤ –ø–æ–∫–∏ —â–æ –ø–æ—Ä–æ–∂–Ω—ñ–π."
                    ]);
                }
                break;
            case (preg_match('/^üõí –ö–æ—à–∏–∫/', $text) ? true : false):
                $this->showCart($chatId);
                break;
            case 'üí≥ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è':
                $this->checkoutCart($chatId);
                break;
            case 'üóë –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É':
                $this->clearCart($chatId);
                break;
            case 'üìò –Ø–∫ –∑–∞–º–æ–≤–∏—Ç–∏':
                $messageText = $this->settings->how_ordering ?? '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è.';
                $this->sendMessageWithCleanup($chatId, $member, [
                    'chat_id' => $chatId,
                    'text' => $messageText,
                    'parse_mode' => 'HTML',
                    'reply_markup' => json_encode(['keyboard' => $this->getMainMenuKeyboard($chatId), 'resize_keyboard' => true])
                ]);
                break;
            case 'üí≥ –û–ø–ª–∞—Ç–∞':
                $messageText = $this->settings->payments ?? '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è.';
                $this->sendMessageWithCleanup($chatId, $member, [
                    'chat_id' => $chatId,
                    'text' => $messageText,
                    'parse_mode' => 'HTML',
                    'reply_markup' => json_encode(['keyboard' => $this->getMainMenuKeyboard($chatId), 'resize_keyboard' => true])
                ]);
                break;
            case '‚≠êÔ∏è –í—ñ–¥–≥—É–∫–∏':
                $messageText = $this->settings->reviews ?? '–í—ñ–¥–≥—É–∫–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ.';
                $this->sendMessageWithCleanup($chatId, $member, [
                    'chat_id' => $chatId,
                    'text' => $messageText,
                    'parse_mode' => 'HTML',
                    'reply_markup' => json_encode(['keyboard' => $this->getMainMenuKeyboard($chatId), 'resize_keyboard' => true])
                ]);
                break;
            case '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
                $prev = $this->popHistory($member);
                if ($prev) {
                    if ($prev['type'] === 'subcategory' && isset($prev['id'])) {
                        $this->sendSubcategoryProductsMenu($chatId, $prev['id']);
                    } elseif ($prev['type'] === 'brand' && isset($prev['id'])) {
                        $this->sendBrandProductsMenu($chatId, $prev['id']);
                    } elseif ($prev['type'] === 'catalog') {
                        $this->sendCatalogMenu($chatId);
                    } elseif ($prev['type'] === 'main') {
                        $this->sendMainMenu($chatId);
                    } elseif ($prev['type'] === 'brand_menu') {
                        Log::info('fucking fuck');
                    } elseif ($prev['type'] === 'moringa') {
                        $this->sendMoringaMenu($chatId);
                    } else {
                        $this->sendMainMenu($chatId);
                    }
                } else {
                    $this->sendMainMenu($chatId);
                }
                break;
            case '‚ÑπÔ∏è –ü—Ä–æ –ø—Ä–æ–¥—É–∫—Ç':
            case 'üìò –ü—Ä–æ —Ç–æ–≤–∞—Ä':
                $brand = null;
                if ($member && $member->current_brand_id) {
                    $brand = Brand::find($member->current_brand_id);
                }
                if (!$brand) {
                    $brand = Brand::where('name', 'Moringa')->first();
                }
                $this->sendMessageWithCleanup($chatId, $member, [
                    'chat_id' => $chatId,
                    'text' => $brand->description,
                    'reply_markup' => json_encode(['keyboard' => $this->sendBrandMenu($chatId), 'resize_keyboard' => true])
                ]);
                break;
            case 'üí∞ –ü—Ä–∞–π—Å':
                $brand = null;
                if ($member && $member->current_brand_id) {
                    $brand = Brand::find($member->current_brand_id);
                }
                if (!$brand) {
                    $brand = Brand::where('name', 'Moringa')->first();
                }

                $this->sendMessageWithCleanup($chatId, $member, [
                    'chat_id' => $chatId,
                    'text' => $brand->price,
                    'parse_mode' => 'HTML',
                    'reply_markup' => json_encode(['keyboard' => $this->sendBrandMenu($chatId), 'resize_keyboard' => true])
                ]);
                break;
            case 'üõí –¢–æ–≤–∞—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó':
                $brand = null;
                if ($member && $member->current_brand_id) {
                    $brand = Brand::find($member->current_brand_id);
                }
                if (!$brand) {
                    $brand = Brand::where('name', 'Moringa')->first();
                }
                $this->sendBrandProductsMenu($chatId, $brand->id);
                break;
            default:
                $brand = Brand::where('name', $text)->first();
                if ($brand && $member) {
                    $this->pushHistory($member);
                    $this->setCurrentState($member, ['type' => 'brand', 'id' => $brand->id]);
                    $member->update(['current_brand_id' => $brand->id]);
                    $this->sendBrandAnalogMenu($chatId, $brand->id);
                    break;
                }

                if (str_starts_with($text, 'üõí –ü—Ä–∏–¥–±–∞—Ç–∏ ')) {
                    $productId = (int)str_replace('üõí –ü—Ä–∏–¥–±–∞—Ç–∏ ', '', $text);
                    if ($member) {
                        Order::create([
                            'member_id' => $member->id,
                            'product_id' => $productId,
                            'status' => 'new',
                        ]);
                    }
                    Telegram::sendMessage([
                        'chat_id' => $chatId,
                        'text' => '–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–≤ º—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.'
                    ]);
                    $this->sendMainMenu($chatId);
                    break;
                }

                break;
        }

        $subcategory = Subcategory::where('name', $text)->first();
        if ($subcategory) {
            if ($member) {
                $this->pushHistory($member);
                $this->setCurrentState($member, ['type' => 'subcategory', 'id' => $subcategory->id]);
            }
            $this->sendSubcategoryProductsMenu($chatId, $subcategory->id);
            return;
        }
    }

    private function sendCatalogMenu($chatId)
    {
        $member = Member::where('telegram_id', $chatId)->first();
        $brands = Brand::all();
        $keyboard = [];
        foreach ($brands as $brand) {
            $keyboard[] = [$brand->name];
        }
        $keyboard[] = ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥', $this->getCartButton($chatId)[0]];
        
        $this->sendMessageWithCleanup($chatId, $member, [
            'chat_id' => $chatId,
            'text' => '–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—ñ–≤:',
            'reply_markup' => json_encode(['keyboard' => $keyboard, 'resize_keyboard' => true])
        ]);
    }

    private function sendBrandAnalogMenu($chatId, $brandId)
    {
        $brand = Brand::find($brandId);
        $member = Member::where('telegram_id', $chatId)->first();
        if ($member) {
            $this->pushHistory($member);
            $this->setCurrentState($member, ['type' => 'brand', 'id' => $brandId]);
        }

        $this->sendMessageWithCleanup($chatId, $member, [
            'chat_id' => $chatId,
            'text' => $brand->chat_text ?? '.',
            'reply_markup' => json_encode(['keyboard' => $this->sendBrandMenu($chatId), 'resize_keyboard' => true])
        ]);
    }

    private function sendBrandMenu($chatId)
    {
        return [
            ['‚ÑπÔ∏è –ü—Ä–æ –ø—Ä–æ–¥—É–∫—Ç'],
            ['üí∞ –ü—Ä–∞–π—Å'],
            ['üõí –¢–æ–≤–∞—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó'],
            ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥', $this->getCartButton($chatId)[0]],
        ];
    }

    private function sendBrandProductsMenu($chatId, $brandId)
    {
        $member = Member::where('telegram_id', $chatId)->first();
        $subcategories = Subcategory::where('brand_id', $brandId)->get();
        if ($subcategories->count() > 0) {
            $keyboard = [];
            foreach ($subcategories as $subcategory) {
                $keyboard[] = [$subcategory->name];
            }
            $keyboard[] = ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥', $this->getCartButton($chatId)[0]];
            
            $this->sendMessageWithCleanup($chatId, $member, [
                'chat_id' => $chatId,
                'text' => '–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º—É –ø—Ä–æ–¥—É–∫—Ç—É —ñ –∑–∞–º–æ–≤–ª—è–π—Ç–µ –∑—Ä—É—á–Ω–æ.',
                'reply_markup' => json_encode(['keyboard' => $keyboard, 'resize_keyboard' => true])
            ]);
        } else {
            $this->sendMessageWithCleanup($chatId, $member, [
                'chat_id' => $chatId,
                'text' => '–£ —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —â–µ –Ω–µ–º–∞—î –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ–π.'
            ]);
        }
    }

    private function sendSubcategoryProductsMenu($chatId, $subcategoryId)
    {
        $products = Product::where('subcategory_id', $subcategoryId)->get();
        $keyboard = [
            ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥', $this->getCartButton($chatId)[0]],
        ];
        if ($products->count() > 0) {
            foreach ($products as $product) {
                $caption = "<b>{$product->name}</b>\n\n";
                $caption .= "{$product->description}\n\n";
                if ($product->options && $product->options->count() > 0) {
                    $inlineKeyboard = [];
                    foreach ($product->options as $option) {
                        $inlineKeyboard[] = [
                            ['text' => $option->name . ' ‚Äî ' . $option->price . ' –≥—Ä–Ω', 'callback_data' => 'choose_option_' . $option->id]
                        ];
                    }
                } else {
                    $caption .= "üí∞ {$product->price} –≥—Ä–Ω";
                    $inlineKeyboard = [
                        [
                            ['text' => 'üõí –ü—Ä–∏–¥–±–∞—Ç–∏ –∑–∞—Ä–∞–∑', 'callback_data' => 'buy_product_buy_product_' . $product->id],
                            ['text' => '‚ûï –î–æ–¥–∞—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É', 'callback_data' => 'add_to_cart_' . $product->id]
                        ]
                    ];
                }
                if (!empty($product->image_url)) {
                    $localPath = public_path('/storage/'.$product->image_url);
                    if (file_exists($localPath)) {
                        $photo = InputFile::create($localPath, basename($localPath));
                    } else {
                        $photo = InputFile::create($product->image_url, basename($product->image_url));
                    }
                    Telegram::sendPhoto([
                        'chat_id' => $chatId,
                        'photo' => $photo,
                        'caption' => $caption,
                        'parse_mode' => 'HTML',
                        'reply_markup' => json_encode(['inline_keyboard' => $inlineKeyboard])
                    ]);
                } else {
                    Telegram::sendMessage([
                        'chat_id' => $chatId,
                        'text' => $caption,
                        'parse_mode' => 'HTML',
                        'reply_markup' => json_encode(['inline_keyboard' => $inlineKeyboard])
                    ]);
                }
            }
        } else {
            Telegram::sendMessage([
                'chat_id' => $chatId,
                'text' => '–£ —Ü—ñ–π –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —â–µ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤.',
                'reply_markup' => json_encode(['keyboard' => $keyboard, 'resize_keyboard' => true])
            ]);
        }
    }

    private function getMainMenuKeyboard($chatId)
    {
        return [
            ['üìÇ –ö–∞—Ç–∞–ª–æ–≥', 'üî• –¢–æ–ø –ø—Ä–æ–¥–∞–∂—ñ–≤'],
            ['üéÅ –û—Ç—Ä–∏–º–∞–π –∑–Ω–∏–∂–∫—É'],
            ['üìò –Ø–∫ –∑–∞–º–æ–≤–∏—Ç–∏', 'üí≥ –û–ø–ª–∞—Ç–∞'],
            [$this->getCartButton($chatId)[0]],
            ['‚≠êÔ∏è –í—ñ–¥–≥—É–∫–∏'],
        ];
    }

    private function handleCallback($chatId, $data)
    {
        Log::info($data);
        $member = Member::where('telegram_id', $chatId)->first();
        if (str_starts_with($data, 'choose_option_')) {
            if ($member) {
                $this->pushHistory($member);
                $this->setCurrentState($member, ['type' => 'option', 'id' => (int)str_replace('choose_option_', '', $data)]);
            }
            $optionId = (int)str_replace('choose_option_', '', $data);
            $option = ProductOption::find($optionId);
            if ($option) {
                $inlineKeyboard = [
                    [
                        ['text' => 'üõí –ü—Ä–∏–¥–±–∞—Ç–∏ –∑–∞—Ä–∞–∑', 'callback_data' => 'buy_product_option_' . $option->id],
                        ['text' => '‚ûï –î–æ–¥–∞—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É', 'callback_data' => 'add_to_cart_option_' . $option->id]
                    ]
                ];
                $caption = "<b>{$option->product->name}</b>\n\n";
                $caption .= "{$option->product->description}\n\n";
                $caption .= "<b>{$option->name}</b> ‚Äî {$option->price} –≥—Ä–Ω";
                $update = Telegram::getWebhookUpdates();
                $message = $update->getCallbackQuery()->getMessage();
                if ($message->has('photo')) {
                    Telegram::editMessageCaption([
                        'chat_id' => $chatId,
                        'message_id' => $message->getMessageId(),
                        'caption' => $caption,
                        'parse_mode' => 'HTML',
                        'reply_markup' => json_encode(['inline_keyboard' => $inlineKeyboard])
                    ]);
                } else {
                    Telegram::editMessageText([
                        'chat_id' => $chatId,
                        'message_id' => $message->getMessageId(),
                        'text' => $caption,
                        'parse_mode' => 'HTML',
                        'reply_markup' => json_encode(['inline_keyboard' => $inlineKeyboard])
                    ]);
                }
            }
        } elseif (str_starts_with($data, 'buy_product_option_')) {
            if ($member) {
                $this->pushHistory($member);
                $this->setCurrentState($member, ['type' => 'option', 'id' => (int)str_replace('buy_product_option_', '', $data)]);
            }
            $optionId = (int)str_replace('buy_product_option_', '', $data);
            $this->checkoutDirectProductOption($chatId, $optionId);
            return;
        } elseif (str_starts_with($data, 'add_to_cart_option_')) {
            if ($member) {
                $this->pushHistory($member);
                $this->setCurrentState($member, ['type' => 'option', 'id' => (int)str_replace('add_to_cart_option_', '', $data)]);
            }
            $optionId = (int)str_replace('add_to_cart_option_', '', $data);
            $this->addToCartOption($chatId, $optionId);
        } elseif (str_starts_with($data, 'buy_product_')) {
            if ($member) {
                $this->pushHistory($member);
                $this->setCurrentState($member, ['type' => 'product', 'id' => (int)str_replace('buy_product_', '', $data)]);
            }
            $productId = (int)str_replace('buy_product_', '', $data);
            $this->checkoutDirectProduct($chatId, $productId);
            return;
        } elseif (str_starts_with($data, 'add_to_cart_')) {
            if ($member) {
                $this->pushHistory($member);
                $this->setCurrentState($member, ['type' => 'product', 'id' => (int)str_replace('add_to_cart_', '', $data)]);
            }
            $productId = (int)str_replace('add_to_cart_', '', $data);
            $this->addToCart($chatId, $productId);
        } elseif (str_starts_with($data, 'remove_from_cart_')) {
            $itemId = (int)str_replace('remove_from_cart_', '', $data);
            $this->removeFromCart($chatId, $itemId);
        } elseif (str_starts_with($data, 'increase_quantity_')) {
            $itemId = (int)str_replace('increase_quantity_', '', $data);
            $this->changeQuantity($chatId, $itemId, 1);
        } elseif (str_starts_with($data, 'decrease_quantity_')) {
            $itemId = (int)str_replace('decrease_quantity_', '', $data);
            $this->changeQuantity($chatId, $itemId, -1);
        } elseif ($data === 'checkout_cart') {
            $this->checkoutCart($chatId);
        } elseif ($data === 'clear_cart') {
            $this->clearCart($chatId);
        } elseif ($data === 'back_to_previous') {
            $prev = $this->popHistory($member);
            if ($prev) {
                if ($prev['type'] === 'subcategory' && isset($prev['id'])) {
                    $this->sendSubcategoryProductsMenu($chatId, $prev['id']);
                } elseif ($prev['type'] === 'brand' && isset($prev['id'])) {
                    $this->sendBrandProductsMenu($chatId, $prev['id']);
                } elseif ($prev['type'] === 'catalog') {
                    $this->sendCatalogMenu($chatId);
                } elseif ($prev['type'] === 'main') {
                    $this->sendMainMenu($chatId);
                } elseif ($prev['type'] === 'analogs') {

                } elseif ($prev['type'] === 'moringa') {
                    $this->sendMoringaMenu($chatId);
                } else {
                    $this->sendMainMenu($chatId);
                }
            } else {
                $this->sendMainMenu($chatId);
            }
            return;
        } elseif ($data === 'pay_type_prepaid') {
            $this->startPrepaidCheckout($chatId);
            return;
        } elseif ($data === 'pay_type_cod') {
            $this->startCodCheckout($chatId);
            return;
        } elseif (str_starts_with($data, 'show_subcategory_')) {
            if ($member) {
                $subcategoryId = (int)str_replace('show_subcategory_', '', $data);
                $this->pushHistory($member);
                $this->setCurrentState($member, ['type' => 'subcategory', 'id' => $subcategoryId]);
                $this->sendSubcategoryProductsMenu($chatId, $subcategoryId);
            }
        } elseif ($member && str_starts_with($data, 'choose_brand_')) {
            $brandId = (int)str_replace('choose_brand_', '', $data);
            $this->pushHistory($member);
            $this->setCurrentState($member, ['type' => 'brand', 'id' => $brandId]);
            $member->update(['current_brand_id' => $brandId]);
            $this->sendBrandAnalogMenu($chatId, $brandId);
            return;
        }

        $brand = Brand::where('name', $data)->first();
        if ($brand && $member) {
            $member->update(['current_brand_id' => $brand->id]);
            $this->sendBrandAnalogMenu($chatId, $brand->id);
            return;
        }
    }

    private function replacePlaceholders(?string $text, array $data): string
    {
        if (empty($text)) {
            return '';
        }
        foreach ($data as $key => $value) {
            $text = str_replace("{{{$key}}}", $value, $text);
            $text = str_replace("{{ {$key} }}", $value, $text);
        }
        return $text;
    }

    private function addToCartOption($chatId, $optionId)
    {
        $member = Member::where('telegram_id', $chatId)->first();
        $option = ProductOption::find($optionId);
        $product = $option ? $option->product : null;
        if (!$member || !$option || !$product) {
            Telegram::answerCallbackQuery([
                'callback_query_id' => $this->getCallbackQueryId(),
                'text' => '–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∞—Ä—ñ–∞–Ω—Ç—É —Ç–æ–≤–∞—Ä—É'
            ]);
            return;
        }

        $cartItem = CartItem::where('member_id', $member->id)
            ->where('product_id', $product->id)
            ->where('product_option_id', $option->id)
            ->first();

        if ($cartItem) {
            $cartItem->increment('quantity');
        } else {
            try {
                CartItem::create([
                    'member_id' => $member->id,
                    'product_id' => $product->id,
                    'product_option_id' => $option->id,
                    'quantity' => 1
                ]);
            } catch (\Exception $e) {
                \Log::error('CartItem create error', [
                    'member_id' => $member->id,
                    'product_id' => $product->id,
                    'product_option_id' => $option->id,
                    'error' => $e->getMessage()
                ]);

                $cartItem = CartItem::where('member_id', $member->id)
                    ->where('product_id', $product->id)
                    ->where('product_option_id', $option->id)
                    ->first();
                if ($cartItem) {
                    $cartItem->increment('quantity');
                }
            }
        }
        Telegram::answerCallbackQuery([
            'callback_query_id' => $this->getCallbackQueryId(),
            'text' => "‚úÖ {$product->name} ({$option->name}) –¥–æ–¥–∞–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É"
        ]);
        $inlineKeyboard = [];
        foreach ($product->options as $opt) {
            $isAvailable = $opt->in_stock && $opt->current_quantity > 0;

            $inlineKeyboard[] = [
                [
                    'text' => $opt->name . ' ‚Äî ' . $opt->price . ' –≥—Ä–Ω' . (!$isAvailable ? ' (–Ω–µ–º–∞ –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ)' : ''),
                    'callback_data' => $isAvailable ? 'choose_option_' . $opt->id : 'noop',
                ]
            ];
        }
        $caption = "<b>{$product->name}</b>\n\n{$product->description}";
        $update = Telegram::getWebhookUpdates();
        $message = $update->getCallbackQuery()->getMessage();
        if ($message->has('photo')) {
            Telegram::editMessageCaption([
                'chat_id' => $chatId,
                'message_id' => $message->getMessageId(),
                'caption' => $caption,
                'parse_mode' => 'HTML',
                'reply_markup' => json_encode(['inline_keyboard' => $inlineKeyboard])
            ]);
        } else {
            Telegram::editMessageText([
                'chat_id' => $chatId,
                'message_id' => $message->getMessageId(),
                'text' => $caption,
                'parse_mode' => 'HTML',
                'reply_markup' => json_encode(['inline_keyboard' => $inlineKeyboard])
            ]);
        }
    }

    private function startPrepaidCheckout($chatId)
    {
        $member = Member::where('telegram_id', $chatId)->first();
        $state = $member->checkout_state ?? [];
        $state['step'] = self::CHECKOUT_STATE['AWAIT_RECEIPT_PHOTO'];
        $state['payment_type'] = 'prepaid';
        $member->checkout_state = $state;
        $member->save();
        $requisites = $this->settings->payments ?? '–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏: ...';
        $requisites = $this->formatCodeBlocks($requisites);

        $total = $state['total'] ?? 0;
        $discountPercent = isset($this->settings->telegram_channel_discount) ? (float)$this->settings->telegram_channel_discount : 0;
        $isSubscribed = $this->isUserSubscribedToChannel($chatId);

        if ($isSubscribed && $discountPercent > 0) {
            $discountAmount = round($total * $discountPercent / 100, 2);
            $totalWithDiscount = $total - $discountAmount;
            $totalText = "\nüí∏ <b>–°—É–º–∞ –¥–æ –æ–ø–ª–∞—Ç–∏ –∑—ñ –∑–Ω–∏–∂–∫–æ—é:</b> <b>" . number_format($totalWithDiscount, 2) . " –≥—Ä–Ω</b> (–∑–Ω–∏–∂–∫–∞ {$discountPercent}% -{$discountAmount} –≥—Ä–Ω)\n";
        } else {
            $totalText = "\nüí∏ <b>–°—É–º–∞ –¥–æ –æ–ø–ª–∞—Ç–∏:</b> <b>" . number_format($total, 2) . " –≥—Ä–Ω</b>\n";
        }
        $this->sendMessageWithCleanup($chatId, $member, [
            'chat_id' => $chatId,
            'text' => "<b>–û–ø–ª–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b>\n\n$totalText$requisites\n\n–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó —É —Ü–µ–π —á–∞—Ç.",
            'parse_mode' => 'HTML',
        ]);
    }

    private function startCodCheckout($chatId)
    {
        $member = Member::where('telegram_id', $chatId)->first();
        $state = $member->checkout_state ?? [];
        $state['step'] = self::CHECKOUT_STATE['AWAIT_SHIPPING_PHONE'];
        $state['payment_type'] = 'cod';
        $member->checkout_state = $state;
        $member->save();
        $this->sendMessageWithCleanup($chatId, $member, [
            'chat_id' => $chatId,
            'text' => "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ (—É —Ñ–æ—Ä–º–∞—Ç—ñ +380...)"
        ]);
    }

    private function finalizeOrder($chatId, $paymentType)
    {
        $member = Member::where('telegram_id', $chatId)->first();
        $state = $member->checkout_state;
        $cartSnapshot = $state['cart_snapshot'] ?? [];
        $total = $state['total'] ?? 0;
        $discountPercent = isset($this->settings->telegram_channel_discount) ? (float)$this->settings->telegram_channel_discount : 0;
        $isSubscribed = $this->isUserSubscribedToChannel($chatId);
        $discountAmount = 0;
        $totalWithDiscount = $total;
        if ($isSubscribed && $discountPercent > 0) {
            $discountAmount = round($total * $discountPercent / 100, 2);
            $totalWithDiscount = $total - $discountAmount;
        }
        $order = Order::create([
            'member_id' => $member->id,
            'status' => 'new',
            'total_amount' => $total,
            'source' => 'cart',
            'notes' => '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –±–æ—Ç–∞',
            'payment_type' => $state['payment_type'] ?? $paymentType,
            'payment_receipt' => $state['payment_receipt'] ?? null,
            'shipping_phone' => $state['shipping_phone'] ?? null,
            'shipping_city' => $state['shipping_city'] ?? null,
            'shipping_carrier' => $state['shipping_carrier'] ?? null,
            'shipping_office' => $state['shipping_office'] ?? null,
            'shipping_name' => $state['shipping_name'] ?? null,
            'discount_percent' => $discountPercent,
            'discount_amount' => $discountAmount,
        ]);
        foreach ($cartSnapshot as $item) {
            OrderItem::create([
                'order_id' => $order->id,
                'product_id' => $item['product_id'],
                'product_option_id' => $item['product_option_id'],
                'quantity' => $item['quantity'],
                'price' => $item['product_option_id'] ? ProductOption::find($item['product_option_id'])->price : Product::find($item['product_id'])->price,
            ]);
        }

        $member->cartItems()->delete();
        $member->checkout_state = null;
        $member->save();

        $order->refresh();
        $orderItems = $order->orderItems()->with(['product', 'productOption'])->get();
        $message = "‚úÖ <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!</b>\n\n";
        $message .= "üìÑ <b>–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> {$order->order_number}\n";

        $message .= "\n<b>–¢–æ–≤–∞—Ä–∏ —É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ:</b>\n";
        foreach ($orderItems as $item) {
            $product = $item->product;
            $option = $item->productOption;
            $itemPrice = $option ? $option->price : $product->price;
            $itemTotal = $item->quantity * (float) $itemPrice;
            $message .= "üì¶ <b>{$product->name}</b>";
            if ($option) {
                $message .= " <em>({$option->name})</em>";
            }
            $message .= "\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {$item->quantity} —à—Ç.\n";
            $message .= "–¶—ñ–Ω–∞: {$itemPrice} –≥—Ä–Ω √ó {$item->quantity} = <b>{$itemTotal} –≥—Ä–Ω</b>\n\n";
        }
        if ($discountPercent > 0 && $discountAmount > 0) {
            $message .= "üéÅ <b>–í–∞—à–∞ –∑–Ω–∏–∂–∫–∞: {$discountPercent}% (-{$discountAmount} –≥—Ä–Ω)</b>\n";
            $message .= "üí∏ <b>–°—É–º–∞ –∑—ñ –∑–Ω–∏–∂–∫–æ—é: {$totalWithDiscount} –≥—Ä–Ω</b>\n";
        } else {
            $message .= "üí∞ <b>–°—É–º–∞:</b> {$order->formatted_total}\n";
        }
        $message .= "–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–≤ º—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.";


        $notify = "üÜï <b>–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b>\n\nüë§ Username: {$member->username}\nüí∞ –°—É–º–∞: $order->formatted_total \n\n" .
            env('APP_URL') . "/admin/orders/" . $order->id;
        app(TelegramOrderNotifier::class)->send($notify);

        Telegram::sendMessage([
            'chat_id' => $chatId,
            'text' => $message,
            'parse_mode' => 'HTML',
            'reply_markup' => json_encode(['keyboard' => $this->getMainMenuKeyboard($chatId), 'resize_keyboard' => true])
        ]);
    }

    private function handlePhoto($chatId, $photo)
    {
        $member = Member::where('telegram_id', $chatId)->first();
        if ($member && $member->checkout_state && isset($member->checkout_state['step']) && $member->checkout_state['step'] === self::CHECKOUT_STATE['AWAIT_RECEIPT_PHOTO']) {
            $state = $member->checkout_state;
            $fileId = $photo['file_id'] ?? null;
            if ($fileId) {
                try {
                    $file = Telegram::getFile(['file_id' => $fileId]);
                    $filePath = $file->get('file_path');
                    $localPath = storage_path('app/public/receipts/' . uniqid('receipt_') . '.jpg');
                    $url = 'https://api.telegram.org/file/bot' . env('TELEGRAM_BOT_TOKEN') . '/' . $filePath;
                    $fileContent = @file_get_contents($url);
                    if ($fileContent === false) {
                        \Log::error('handlePhoto: file_get_contents failed', ['url' => $url]);
                    } else {
                        $result = @file_put_contents($localPath, $fileContent);
                        if ($result === false) {
                            \Log::error('handlePhoto: file_put_contents failed', ['localPath' => $localPath]);
                        } else {
                            $state['payment_receipt'] = 'receipts/' . basename($localPath);
                            $state['step'] = self::CHECKOUT_STATE['AWAIT_SHIPPING_PHONE'];
                            $member->checkout_state = $state;
                            $member->save();
                            $this->sendMessageWithCleanup($chatId, $member, [
                                'chat_id' => $chatId,
                                'text' => "–î—è–∫—É—î–º–æ! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ (—É —Ñ–æ—Ä–º–∞—Ç—ñ +380...):"
                            ]);
                            return;
                        }
                    }
                } catch (\Exception $e) {
                    \Log::error('handlePhoto: exception', ['error' => $e->getMessage()]);
                }
            }
        }
    }

    private function checkoutDirectProduct($chatId, $productId)
    {
        $member = Member::where('telegram_id', $chatId)->first();
        $product = Product::find($productId);
        if (!$member || !$product) return;
        $activeOrders = Order::where('member_id', $member->id)
            ->whereIn('status', ['new', 'processing'])
            ->count();
        if ($activeOrders > 0) {
            Telegram::sendMessage([
                'chat_id' => $chatId,
                'text' => "–£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ—á–µ–∫–∞–π—Ç–µ—Å—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ ‚è≥\n–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤ º—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º üìû"
            ]);
            return;
        }
        $hasOrders = Order::where('member_id', $member->id)->exists();
        $keyboard = [
            [['text' => 'üí≥ –ü–µ—Ä–µ–¥–ø–ª–∞—Ç–∞', 'callback_data' => 'pay_type_prepaid']],
        ];
        if (!$hasOrders) {
            $keyboard[] = [['text' => 'üöö –ù–∞–∫–ª–∞–¥–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂', 'callback_data' => 'pay_type_cod']];
        }
        $this->sendMessageWithCleanup($chatId, $member, [
            'chat_id' => $chatId,
            'text' => "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:\n\n<b>–ü–µ—Ä–µ–¥–ø–ª–∞—Ç–∞</b> ‚Äî –æ–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–∫—É, –ø—ñ—Å–ª—è —á–æ–≥–æ –≤–∏ –Ω–∞–¥—Å–∏–ª–∞—î—Ç–µ —Ñ–æ—Ç–æ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó.\n<b>–ù–∞–∫–ª–∞–¥–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂</b> ‚Äî –æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ (–¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏—à–µ –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è).",
            'parse_mode' => 'HTML',
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard])
        ]);
        $state = $member->checkout_state ?? [];
        $state['step'] = self::CHECKOUT_STATE['AWAIT_PAYMENT_TYPE'];
        $state['cart_snapshot'] = [[
            'product_id' => $product->id,
            'product_option_id' => null,
            'quantity' => 1,
        ]];
        $state['total'] = $product->price;
        $member->checkout_state = $state;
        $member->save();
    }

    private function checkoutDirectProductOption($chatId, $optionId)
    {
        $member = Member::where('telegram_id', $chatId)->first();
        $option = ProductOption::find($optionId);
        $product = $option ? $option->product : null;
        if (!$member || !$option || !$product) return;
        $activeOrders = Order::where('member_id', $member->id)
            ->whereIn('status', ['new', 'processing'])
            ->count();
        if ($activeOrders > 0) {
            Telegram::sendMessage([
                'chat_id' => $chatId,
                'text' => "–£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ—á–µ–∫–∞–π—Ç–µ—Å—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ ‚è≥\n–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤ º—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º üìû"
            ]);
            return;
        }
        $hasOrders = Order::where('member_id', $member->id)->exists();
        $keyboard = [
            [['text' => 'üí≥ –ü–µ—Ä–µ–¥–ø–ª–∞—Ç–∞', 'callback_data' => 'pay_type_prepaid']],
        ];
        if (!$hasOrders) {
            $keyboard[] = [['text' => 'üöö –ù–∞–∫–ª–∞–¥–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂', 'callback_data' => 'pay_type_cod']];
        }
        $this->sendMessageWithCleanup($chatId, $member, [
            'chat_id' => $chatId,
            'text' => "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:\n\n<b>–ü–µ—Ä–µ–¥–ø–ª–∞—Ç–∞</b> ‚Äî –æ–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–∫—É, –ø—ñ—Å–ª—è —á–æ–≥–æ –≤–∏ –Ω–∞–¥—Å–∏–ª–∞—î—Ç–µ —Ñ–æ—Ç–æ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó.\n<b>–ù–∞–∫–ª–∞–¥–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂</b> ‚Äî –æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ (–¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏—à–µ –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è).",
            'parse_mode' => 'HTML',
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard])
        ]);
        $state = $member->checkout_state ?? [];
        $state['step'] = self::CHECKOUT_STATE['AWAIT_PAYMENT_TYPE'];
        $state['cart_snapshot'] = [[
            'product_id' => $product->id,
            'product_option_id' => $option->id,
            'quantity' => 1,
        ]];
        $state['total'] = $option->price;
        $member->checkout_state = $state;
        $member->save();
    }

    private function getCartButton($chatId)
    {
        $member = Member::where('telegram_id', $chatId)->first();
        $cartCount = $member ? $member->cart_items_count : 0;
        return ['üõí –ö–æ—à–∏–∫' . ($cartCount > 0 ? " ({$cartCount})" : '')];
    }

    private function isUserSubscribedToChannel($chatId)
    {
        $channelUsername = $this->settings->telegram_channel_username ?? '@auraaashopp';
        try {
            $member = $this->telegram->getChatMember([
                'chat_id' => $channelUsername,
                'user_id' => $chatId
            ]);
            return $member->status !== 'left';
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            return false;
        }
    }

    private function pushHistory($member)
    {
        $uiState = $member->ui_state ?? [];
        if (is_string($uiState)) $uiState = json_decode($uiState, true);
        $history = $uiState['history'] ?? [];
        if (is_string($history)) $history = json_decode($history, true);
        $current = $uiState['current'] ?? ['type' => 'main'];
        $history[] = $current;
        $uiState['history'] = $history;
        $member->ui_state = $uiState;
        $member->save();
    }

    private function setCurrentState($member, $state)
    {
        $uiState = $member->ui_state ?? [];
        if (is_string($uiState)) $uiState = json_decode($uiState, true);
        $uiState['current'] = $state;
        $member->ui_state = $uiState;
        $member->save();
    }

    private function popHistory($member)
    {
        $uiState = $member->ui_state ?? [];
        if (is_string($uiState)) $uiState = json_decode($uiState, true);
        $history = $uiState['history'] ?? [];
        if (is_string($history)) $history = json_decode($history, true);
        $prev = null;
        if (!empty($history)) {
            $prev = array_pop($history);
            $uiState['history'] = $history;
            $uiState['current'] = $prev;
            $member->ui_state = $uiState;
            $member->save();
        }
        return $prev;
    }

    private function formatCodeBlocks($text)
    {
        return preg_replace_callback('/`([^`]+)`/', function ($matches) {
            return '<code>' . htmlspecialchars($matches[1]) . '</code>';
        }, $text);
    }

    /**
     * –í–∏–¥–∞–ª—è—î –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —á–∞—Ç—É
     */
    private function deletePreviousMessages($chatId, $member)
    {
        if (!$member) {
            return;
        }

        $uiState = $member->ui_state ?? [];
        if (is_string($uiState)) {
            $uiState = json_decode($uiState, true);
        }

        $messageIds = $uiState['message_ids'] ?? [];
        
        foreach ($messageIds as $messageId) {
            try {
                Telegram::deleteMessage([
                    'chat_id' => $chatId,
                    'message_id' => $messageId
                ]);
            } catch (\Exception $e) {
                // –õ–æ–≥—É—î–º–æ –ø–æ–º–∏–ª–∫—É, –∞–ª–µ –Ω–µ –∑—É–ø–∏–Ω—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
                Log::warning('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è', [
                    'chat_id' => $chatId,
                    'message_id' => $messageId,
                    'error' => $e->getMessage()
                ]);
            }
        }

        // –û—á–∏—â–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        $uiState['message_ids'] = [];
        $member->ui_state = $uiState;
        $member->save();
    }

    /**
     * –ó–±–µ—Ä—ñ–≥–∞—î ID –Ω–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
     */
    private function saveMessageId($member, $messageId)
    {
        if (!$member || !$messageId) {
            return;
        }

        $uiState = $member->ui_state ?? [];
        if (is_string($uiState)) {
            $uiState = json_decode($uiState, true);
        }

        if (!isset($uiState['message_ids'])) {
            $uiState['message_ids'] = [];
        }

        $uiState['message_ids'][] = $messageId;
        $uiState['last_message_id'] = $messageId;
        $member->ui_state = $uiState;
        $member->save();
    }

    /**
     * –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ—á–∏—â–µ–Ω–Ω—è–º –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö
     */
    private function sendMessageWithCleanup($chatId, $member, $params)
    {
        // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        $this->deletePreviousMessages($chatId, $member);

        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        $response = Telegram::sendMessage($params);

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –Ω–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if (isset($response['message_id'])) {
            $this->saveMessageId($member, $response['message_id']);
        }

        return $response;
    }
}
