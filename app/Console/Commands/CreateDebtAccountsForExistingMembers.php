<?php

namespace App\Console\Commands;

use App\Models\Member;
use App\Models\DebtAccount;
use Illuminate\Console\Command;

class CreateDebtAccountsForExistingMembers extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'debt:create-accounts {--force : Force creation even if accounts exist}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–°—Ç–≤–æ—Ä—é—î —Ä–∞—Ö—É–Ω–∫–∏ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ –¥–ª—è –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤, —è–∫—ñ —ó—Ö –Ω–µ –º–∞—é—Ç—å';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –±–µ–∑ —Ä–∞—Ö—É–Ω–∫—ñ–≤ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ...');

        $membersWithoutDebtAccounts = Member::whereDoesntHave('debtAccount')->get();
        
        if ($membersWithoutDebtAccounts->isEmpty()) {
            $this->info('‚úÖ –£ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –≤–∂–µ —î —Ä–∞—Ö—É–Ω–∫–∏ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ!');
            return 0;
        }

        $this->info("üìä –ó–Ω–∞–π–¥–µ–Ω–æ {$membersWithoutDebtAccounts->count()} –∫–ª—ñ—î–Ω—Ç—ñ–≤ –±–µ–∑ —Ä–∞—Ö—É–Ω–∫—ñ–≤ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ");

        if (!$this->option('force')) {
            if (!$this->confirm('–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—ñ–≤ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ?')) {
                $this->info('‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ');
                return 0;
            }
        }

        $this->info('üöÄ –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–∞—Ö—É–Ω–∫–∏ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ...');

        $bar = $this->output->createProgressBar($membersWithoutDebtAccounts->count());
        $bar->start();

        $created = 0;
        $errors = 0;

        foreach ($membersWithoutDebtAccounts as $member) {
            try {
                DebtAccount::create([
                    'member_id' => $member->id,
                    'total_debt' => 0,
                    'paid_amount' => 0,
                    'remaining_debt' => 0,
                    'balance' => 0,
                    'status' => 'active',
                ]);
                $created++;
            } catch (\Exception $e) {
                $this->error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ä–∞—Ö—É–Ω–∫—É –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ {$member->full_name}: {$e->getMessage()}");
                $errors++;
            }
            $bar->advance();
        }

        $bar->finish();
        $this->newLine();

        if ($created > 0) {
            $this->info("‚úÖ –£—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ {$created} —Ä–∞—Ö—É–Ω–∫—ñ–≤ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ");
        }

        if ($errors > 0) {
            $this->warn("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–æ {$errors} –ø–æ–º–∏–ª–æ–∫ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ä–∞—Ö—É–Ω–∫—ñ–≤");
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        $remainingWithoutAccounts = Member::whereDoesntHave('debtAccount')->count();
        if ($remainingWithoutAccounts === 0) {
            $this->info('üéâ –£ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ —Ç–µ–ø–µ—Ä —î —Ä–∞—Ö—É–Ω–∫–∏ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ!');
        } else {
            $this->warn("‚ö†Ô∏è –ó–∞–ª–∏—à–∏–ª–æ—Å—å {$remainingWithoutAccounts} –∫–ª—ñ—î–Ω—Ç—ñ–≤ –±–µ–∑ —Ä–∞—Ö—É–Ω–∫—ñ–≤ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ");
        }

        return 0;
    }
}